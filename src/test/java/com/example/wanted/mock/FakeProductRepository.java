package com.example.wanted.mock;

import com.example.wanted.product.domain.Product;
import com.example.wanted.product.service.port.ProductRepository;
import com.example.wanted.user.domain.User;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeProductRepository implements ProductRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Product> data = new ArrayList<>();

    @Override
    public Product save(Product product) {
        if(product.getId() == null || product.getId() == 0) {
            Product newProduct = Product.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .name(product.getName())
                    .price((product.getPrice()))
                    .quantity(product.getQuantity())
                    .sellingStatus(product.getSellingStatus())
                    .seller(product.getSeller())
                    .build();
            data.add(newProduct);
            return newProduct;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), product.getId()));
            data.add(product);
            return product;
        }
    }

    @Override
    public Optional<Product> findById(Long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public List<Product> find() {
        return data;
    }
}
