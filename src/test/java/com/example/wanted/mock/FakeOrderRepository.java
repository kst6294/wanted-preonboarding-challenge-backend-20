package com.example.wanted.mock;

import com.example.wanted.order.domain.Order;
import com.example.wanted.order.service.port.OrderRepository;
import com.example.wanted.product.domain.Product;
import com.example.wanted.user.domain.User;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeOrderRepository implements OrderRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Order> data = new ArrayList<>();

    @Override
    public Order save(Order order) {
        if(order.getId() == null || order.getId() == 0) {
            Order newOrder = Order.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .seller(order.getSeller())
                    .buyer(order.getBuyer())
                    .price(order.getPrice())
                    .product(order.getProduct())
                    .status(order.getStatus())
                    .build();
            data.add(newOrder);
            return newOrder;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), order.getId()));
            data.add(order);
            return order;
        }
    }

    @Override
    public Optional<Order> findById(Long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public List<Order> findByUser(User user) {
        return data.stream()
                .filter(item -> item.checkSeller(user) || item.checkBuyer(user))
                .collect(Collectors.toList());
    }

    @Override
    public List<Order> findByProductAndUser(Product product, User user) {
        return data.stream()
                .filter(item -> item.checkProduct(product))
                .filter(item -> item.checkSeller(user) || item.checkBuyer(user))
                .collect(Collectors.toList());
    }
}
